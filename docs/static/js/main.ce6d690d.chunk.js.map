{"version":3,"sources":["enviroment.ts","components/searchBar.tsx","components/containerHst.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["baseUrl","apiKey","SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","bind","assertThisInitialized","onChangeEnter","getSummonerId","state","result","react_default","a","createElement","type","onKeyPress","onBlur","e","currentTarget","value","key","summonerName","_this2","encodedName","encodeURIComponent","Axios","get","concat","then","response","onSelect","data","catch","error","console","log","React","Component","ContainerHst","getMatchHst","checkMatchWin","accountId","containerType","jsonData","prevProps","prevState","snapShot","matches","index_es","TableHead_default","TableRow_default","TableCell_default","align","TableBody_default","map","f","gameId","component","scope","champion","queue","timestamp","role","lane","winstatus","accountID","url","match","setState","objectSpread","_this3","participantId","gameResult","participantIdentities","forEach","participantIdentitie","player","participants","participant","stats","win","App","searchBar","containerHst","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ce6d690d.chunk.js","sourcesContent":["export const baseUrl = 'https://euw1.api.riotgames.com/lol';\n\nexport const apiKey = 'RGAPI-8ef4769b-78a2-4b9b-b217-8def71b65f28';","import React, { ChangeEvent, KeyboardEvent } from 'react';\nimport * as Axios from 'axios';\nimport { baseUrl, apiKey } from '../enviroment';\n\ninterface Props {\n    onSelect: (result: any) => void;\n}\n\ninterface State {\n    result: string;\n}\n\nclass SearchBar extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.onChange = this.onChange.bind(this);\n        this.onChangeEnter = this.onChangeEnter.bind(this);\n        this.getSummonerId = this.getSummonerId.bind(this);\n\n        this.state = {\n            result: ''\n        }\n    }\n    render() {\n        return (\n            <div>\n                <input type=\"text\" onKeyPress={this.onChangeEnter} onBlur={this.onChange} />\n            </div>\n        )\n    }\n    private onChange(e: ChangeEvent<HTMLInputElement>) {\n        this.getSummonerId(e.currentTarget.value);\n    }\n    private onChangeEnter(e: KeyboardEvent<HTMLInputElement>) {\n        if (e.key === 'Enter') {\n            this.getSummonerId(e.currentTarget.value);\n        }\n    }\n    private getSummonerId(summonerName: string)\n    {\n        const encodedName = encodeURIComponent(summonerName);\n\n        let result: any;\n\n        Axios.default.get(`${baseUrl}/summoner/v4/summoners/by-name/${encodedName}?api_key=${apiKey}`)\n        .then(response => {\n            this.props.onSelect(response.data);\n        })\n        .catch(function (error) {\n          console.log(error);\n        })\n        return result;\n    }\n}\nexport default SearchBar;","import { Table } from \"@material-ui/core\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Axios from \"axios\";\nimport React from \"react\";\nimport { apiKey, baseUrl } from \"../enviroment\";\nimport { IMatch } from \"../models/match\";\n\ninterface IProps {\n    accountId: string;\n    containerType: string;\n}\n\ninterface IState {\n    accountId: string;\n    jsonData: any;\n    containerType: string;\n    matches?: IMatch[];\n}\n\nclass ContainerHst extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.getMatchHst = this.getMatchHst.bind(this);\n        this.checkMatchWin = this.checkMatchWin.bind(this);\n\n        this.state = {\n            accountId: this.props.accountId,\n            containerType: this.props.containerType,\n            jsonData: null,\n        };\n    }\n    public componentDidUpdate(prevProps: IProps, prevState: IState, snapShot: any) {\n        if (prevProps.accountId !== this.props.accountId) {\n            this.getMatchHst(this.props.accountId);\n        }\n    }\n    public render() {\n        return (\n            <div>\n                {this.state.matches ? (\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Champion</TableCell>\n                                <TableCell align=\"right\">Warteschlange</TableCell>\n                                <TableCell align=\"right\">Datum</TableCell>\n                                <TableCell align=\"right\">Rolle</TableCell>\n                                <TableCell align=\"right\">Lane</TableCell>\n                                <TableCell align=\"right\">Spielstand</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {\n                                this.state.matches.map((f) => {\n                                    return (\n                                        <TableRow key={f.gameId}>\n                                            <TableCell component=\"th\" scope=\"row\">{f.champion}</TableCell>\n                                            <TableCell align=\"right\">{f.queue}</TableCell>\n                                            <TableCell align=\"right\">{f.timestamp}</TableCell>\n                                            <TableCell align=\"right\">{f.role}</TableCell>\n                                            <TableCell align=\"right\">{f.lane}</TableCell>\n                                            <TableCell align=\"right\">{f.winstatus}</TableCell>\n                                        </TableRow>\n                                    );\n                                },\n                                )\n                            }\n                        </TableBody>\n                    </Table>\n                ) : null}\n\n            </div>\n        );\n    }\n    private getMatchHst(accountID: string) {\n        const url = `${baseUrl}/match/v4/matchlists/by-account/${accountID}?endIndex=10&api_key=${apiKey}`;\n        // const newMatches: Match[];\n        Axios.get(url)\n            .then((response) => {\n                const matches = response.data.matches.map((match: IMatch) => {\n\n                    return {\n                        champion: match.champion,\n                        gameId: match.gameId,\n                        lane: match.lane,\n                        queue: match.queue,\n                        role: match.role,\n                        timestamp: match.timestamp,\n                    };\n                });\n\n                this.setState({ ...this.state, matches });\n                // this.checkMatchWin(matches)\n            })\n            // tslint:disable-next-line:only-arrow-functions\n            .catch(function(error) {\n                // console.log(error);\n            });\n    }\n    private checkMatchWin(matches: IMatch[]) {\n        const newMatches = matches.map((match: IMatch) => {\n            const url = `${baseUrl}/match/v4/matches/${match.gameId}?api_key=${apiKey}`;\n            let result: any;\n            let participantId = \"\";\n            let gameResult = \"\";\n            Axios.get(url)\n                .then((response) => {\n                    result = response.data;\n                    result.participantIdentities.forEach((participantIdentitie: any) => {\n                        if (participantIdentitie.player === this.state.accountId) {\n                            participantId = participantIdentitie.participantId;\n                        }\n                    });\n\n                    result.participants.forEach((participant: any) => {\n                        if (participant.participantId === participantId) {\n                            if (participant.stats.win) {\n                                gameResult = \"Gewonnen!\";\n                            } else {\n                                gameResult = \"Verloren!\";\n                            }\n                        }\n                    });\n                    return { ...match, winstatus: gameResult };\n                    // this.setState({ ...this.state, winStatus: gameResult });\n                })\n                // tslint:disable-next-line:only-arrow-functions\n                .catch(function(error) {\n                    // console.log(error);\n                    return null;\n                });\n        });\n        // this.setState({...this.state, matches: newMatches});\n    }\n}\nexport default ContainerHst;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport SearchBar from './components/searchBar'\nimport ContainerHst from './components/containerHst';\nimport ContainerRte from './components/containerRte';\nimport {Button} from '@material-ui/core';\n\ninterface State {\n  accountId: string;\n\n}\n\nclass App extends React.Component<{}, State>{\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      accountId: ''\n    }\n    \n    this.onSelect = this.onSelect.bind(this);\n  }\n  render() {\n    return(\n      <div>\n        <SearchBar onSelect={this.onSelect}/>\n        <ContainerHst accountId={this.state.accountId} containerType=\"sdf\"/>\n      </div>\n    )\n  }\n  private onSelect(result: any){\n      this.setState({...this.state, accountId: result.accountId})\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}